// Generated by CoffeeScript 1.3.3

LOL.controller('MainCtrl', function($rootScope, $window, $timeout, $compile, $scope, $routeParams, localService) {
  $scope.visibleModal = false;
  $scope.visibleInnerItems = false;
  $scope.visibleInnerSpells = false;
  $scope.visibleInnerRunes = false;
  $scope.isCanSave = false;
  $scope.Characters = Characters;
  $scope.Masteries = Masteries;
  $scope.AllItems = Items;
  $scope.AllSpells = Spells;
  $scope.AllRunes = Runes;
  $scope.name = $routeParams.name || 'Ahri';
  $scope.stats = Characters[$scope.name].stats;
  $scope.items = Characters[$scope.name].items;
  $scope.spells = Characters[$scope.name].spells;
  $scope.skills = Characters[$scope.name].skills;
  $scope.offensive = Characters[$scope.name].offensive;
  $scope.defensive = Characters[$scope.name].defensive;
  $scope.utility = Characters[$scope.name].utility;
  $scope.runes = Characters[$scope.name].runes;
  $scope.$on('$routeChangeStart', function() {
    return $rootScope.offsetScroll = $($window).scrollTop();
  });
  $scope.$on('$routeChangeSuccess', function(scope, next, current) {
    $('#block').hide();
    $('.inner-items, .inner-spells, .inner-runes').draggable();
    $('.skills-inner').sortable({
      placeholder: 'placehold',
      revert: 'true',
      items: 'img',
      tolerance: 'pointer',
      deactivate: function(event, ui) {
        var saves;
        saves = $(ui.item).siblings().andSelf();
        localService = angular.element('html').injector().get('localService');
        return $(saves).each(function() {
          var item;
          item = $scope.name + 'Skill' + $(this).index();
          try {
            return localService.set(item, $(this).attr('src'));
          } catch (error) {
            return alert("Сохранить в локальное хранилище не удалось: " + error);
          }
        });
      }
    }).disableSelection();
    $('#block').fadeIn(1000);
    $window.scrollTo(0, $rootScope.offsetScroll);
    return $timeout(function() {
      Tooltips.items();
      Tooltips.spells();
      Tooltips[$scope.name]();
      Tooltips.masteries();
      return Tooltips.runes();
    });
  });
  $scope.markActiveClass = function(key) {
    if ($routeParams.name === key) {
      return 'ui-tabs-active ui-state-active';
    }
  };
  $scope.resetBuilds = function() {
    return localService.reset();
  };
  $scope.hideItemsBlock = function() {
    $scope.visibleInnerItems = !$scope.visibleInnerItems;
    $timeout(function() {
      return Tooltips.items();
    });
    return null;
  };
  $scope.hideSpellsBlock = function() {
    $scope.visibleInnerSpells = !$scope.visibleInnerSpells;
    $timeout(function() {
      return Tooltips.spells();
    });
    return null;
  };
  $scope.hideRunesBlock = function() {
    $rootScope.visibleInnerRunes = !$rootScope.visibleInnerRunes;
    $timeout(function() {
      return Tooltips.runes();
    });
    return null;
  };
  /*$scope.addRuneInBuild = (rune, $event) ->
      target = $event.target
      $($scope.selectedRune).attr 'ng-src', rune
      rune = $scope.name + 'Rune' + $($scope.selectedRune).index()
      try 
          localService.set(rune, $(target).attr 'ng-src')
          $scope.hideRunesBlock()
      catch error
          alert "Сохранить в локальное хранилище не удалось: #{error}"
      cloner = $('.runes > div > div').clone()
      $('.runes > div > div').remove();
      clonedEl = $compile(cloner)($scope)
      $('.runes > div').append clonedEl
      null
  */

  $scope.offensiveCount = function(offensive) {
    return _.reduce(offensive, function(i, k) {
      return (+i) + (+k);
    });
  };
  $scope.defensiveCount = function(defensive) {
    return _.reduce(defensive, function(i, k) {
      return (+i) + (+k);
    });
  };
  $scope.utilityCount = function(utility) {
    return _.reduce(utility, function(i, k) {
      return (+i) + (+k);
    });
  };
  $scope.doMasteriesCount = function() {
    $scope.masteriesCount = $scope.offensiveCount($scope.offensive) + $scope.defensiveCount($scope.defensive) + $scope.utilityCount($scope.utility);
    return $scope.masteriesCount;
  };
  $scope.saveMasteries = function() {
    $('table p > span:first-child').each(function() {
      var item;
      item = $scope.name + $(this).attr('id');
      try {
        localService.set(item, $(this).text());
      } catch (error) {
        alert("Сохранить в локальное хранилище не удалось: " + error);
      }
      $scope.isCanSave = false;
      return null;
    });
    return null;
  };
  $scope.resetMasteries = function() {
    $scope.offensive = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    $scope.defensive = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    $scope.utility = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    $scope.doMasteriesCount();
    $scope.isCanSave = true;
    return null;
  };
  $scope.offensiveUp = function($event, i, max) {
    $scope.doMasteriesCount();
    if ($scope.offensive[i] < max && $scope.masteriesCount <= 29 && $scope.isCanSave) {
      $scope.offensive[i] += 1;
    }
    return null;
  };
  $scope.defensiveUp = function($event, i, max) {
    $scope.doMasteriesCount();
    if ($scope.defensive[i] < max && $scope.masteriesCount <= 29 && $scope.isCanSave) {
      $scope.defensive[i] += 1;
    }
    return null;
  };
  $scope.utilityUp = function($event, i, max) {
    $scope.doMasteriesCount();
    if ($scope.utility[i] < max && $scope.masteriesCount <= 29 && $scope.isCanSave) {
      $scope.utility[i] += 1;
    }
    return null;
  };
  return null;
});
