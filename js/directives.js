// Generated by CoffeeScript 1.6.2
LOL.directive('stats', function() {
  var stats;

  return stats = {
    template: "<ul><li ng-repeat='(key, val) in stats'>{{ key }} <span>{{ val }}</span></li></ul>",
    restrict: 'E',
    scope: '='
  };
});

LOL.directive('items', function($timeout, localService) {
  var items;

  return items = {
    template: "<img  />",
    restrict: "E",
    replace: true,
    link: function(scope, element, attrs) {
      return element.bind('click', function() {
        scope.$parent.selectedItem = element;
        scope.$parent.visibleInnerItems = !scope.$parent.visibleInnerItems;
        return scope.$parent.$apply();
      });
    }
  };
});

LOL.directive('innerItems', function($timeout, localService) {
  var innerItems;

  return innerItems = {
    template: "<img  />",
    restrict: "E",
    replace: true,
    link: function(scope, element, attrs) {
      return element.bind('click', function() {
        var error, item;

        $('.inner-items > img').css('opacity', '1');
        $(element).css('opacity', '0.3');
        $(scope.$parent.selectedItem).attr('src', item);
        item = scope.$parent.name + 'Item' + $(scope.$parent.selectedItem).index();
        try {
          localService.set(item, $(element).attr('ng-src'));
          scope.$parent.hideItemsBlock();
        } catch (_error) {
          error = _error;
          alert("Сохранить в локальное хранилище не удалось: " + error);
        }
        return $timeout(function() {
          return Tooltips.items();
        });
      });
    }
  };
});

LOL.directive('spells', function() {
  var spells;

  return spells = {
    template: "<img />",
    restrict: "E",
    replace: true,
    link: function(scope, element, attrs) {
      return element.bind('click', function() {
        scope.$parent.selectedSpell = element;
        scope.$parent.visibleInnerSpells = !scope.$parent.visibleInnerSpells;
        return scope.$parent.$apply();
      });
    }
  };
});

LOL.directive('innerSpells', function($timeout, localService) {
  var innerSpells;

  return innerSpells = {
    template: "<img />",
    restrict: "E",
    replace: true,
    link: function(scope, element, attrs) {
      return element.bind('click', function() {
        var error, spell;

        $(scope.$parent.selectedSpell).attr('src', spell);
        spell = scope.$parent.name + 'Spell' + $(scope.$parent.selectedSpell).index();
        try {
          localService.set(spell, $(element).attr('ng-src'));
          scope.$parent.hideSpellsBlock();
        } catch (_error) {
          error = _error;
          alert("Сохранить в локальное хранилище не удалось: " + error);
        }
        return $timeout(function() {
          return Tooltips.spells();
        });
      });
    }
  };
});

LOL.directive('skills', function(localService) {
  var skills;

  return skills = {
    template: "<img />",
    restrict: "E",
    replace: true
  };
});

LOL.directive('runes', function($rootScope) {
  var runes;

  return runes = {
    template: "<div>                       <img class='mark' ng-src='{{ runes[0] }}'/>x9                       <img class='seal' ng-src='{{ runes[1] }}'/>x9                       <img class='glyph' ng-src='{{ runes[2] }}'/>x9                       <img class='quint' ng-src='{{ runes[3] }}' />x3                   </div>",
    restrict: "E",
    replace: true,
    link: function(scope, element, attrs) {
      return element.on('click', 'img', function(e) {
        $rootScope.typeRune = e.target.className;
        $rootScope.selectedRune = e.target;
        $rootScope.visibleInnerRunes = !$rootScope.visibleInnerRunes;
        $rootScope.$apply();
        return Tooltips.runes();
      });
    }
  };
});

LOL.directive('innerRunes', function($timeout, $rootScope, $compile, localService) {
  var innerRunes;

  return innerRunes = {
    template: "<img />",
    restrict: "E",
    replace: true,
    link: function(scope, element, attrs) {
      return element.bind('click', function() {
        var clone, error, rune;

        clone = $($rootScope.selectedRune).clone();
        $(clone).attr('src', scope.rune);
        $(clone).insertAfter($rootScope.selectedRune);
        $($rootScope.selectedRune).remove();
        rune = scope.name + 'Rune' + $(clone).index();
        try {
          localService.set(rune, $(element).attr('src'));
          scope.hideRunesBlock();
        } catch (_error) {
          error = _error;
          alert("Сохранить в локальное хранилище не удалось: " + error);
        }
        return $rootScope.$apply();
      });
    }
  };
});
