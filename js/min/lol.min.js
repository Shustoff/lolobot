// Generated by CoffeeScript 1.6.2
var LOL;

LOL = angular.module('lol', []).value('$anchorScroll', angular.noop);

LOL.run(function() {
  return $('#myModal').modal('hide');
});

LOL.config(function($routeProvider, $locationProvider) {
  $routeProvider.when('/', {
    redirectTo: '/Ahri'
  });
  $routeProvider.when('/:name', {
    controller: 'MainCtrl',
    template: $('#tabs').html()
  });
  $locationProvider.html5Mode(false);
  return null;
});
;// Generated by CoffeeScript 1.6.2
LOL.factory('localService', function() {
  return {
    set: function(n, m) {
      return localStorage.setItem(n, m);
    },
    get: function(n) {
      return localStorage.getItem(n);
    },
    del: function(n) {
      return localStorage.removeItem(n);
    },
    reset: function() {
      var error;

      try {
        localStorage.clear();
        return window.location.reload();
      } catch (_error) {
        error = _error;
        return alert("Не удалось очистить локальное хранилище: " + error);
      }
    }
  };
});
;// Generated by CoffeeScript 1.6.2
LOL.filter('initItems', function(localService) {
  return function(items, name) {
    var i, locItem, numberItem, _i;

    numberItem = 0;
    for (i = _i = 0; _i < 7; i = ++_i) {
      locItem = name + 'Item' + numberItem;
      if (localService.get(locItem) != null) {
        items[i] = localService.get(locItem);
      }
      numberItem++;
    }
    return items;
  };
});

LOL.filter('initSpells', function(localService) {
  return function(spells, name) {
    var i, locSpell, numberSpell, _i;

    numberSpell = 0;
    for (i = _i = 0; _i < 2; i = ++_i) {
      locSpell = name + 'Spell' + numberSpell;
      if (localService.get(locSpell) != null) {
        spells[i] = localService.get(locSpell);
      }
      numberSpell++;
    }
    return spells;
  };
});

LOL.filter('existsSpells', function(localService) {
  return function(spells) {
    var allSpells, firstSpell, key, secondSpell, value;

    firstSpell = $('.spells img:first').attr('src');
    secondSpell = $('.spells img:last').attr('src');
    allSpells = {};
    for (key in spells) {
      value = spells[key];
      if ((value === firstSpell) || (value === secondSpell)) {
        continue;
      }
      allSpells[key] = value;
    }
    return allSpells;
  };
});

LOL.filter('existsRunes', function($rootScope, $timeout, localService) {
  return function(runes, typeRune) {
    var allRunes, key, reg, src, value;

    allRunes = {};
    switch (typeRune) {
      case 'mark':
        reg = /MO/gi;
        src = $('.mark').attr('src');
        break;
      case 'seal':
        reg = /SO/gi;
        src = $('.seal').attr('src');
        break;
      case 'glyph':
        reg = /GO/gi;
        src = $('.glyph').attr('src');
        break;
      case 'quint':
        reg = /QO/gi;
        src = $('.quint').attr('src');
        break;
      default:
        reg = /MO/gi;
    }
    for (key in runes) {
      value = runes[key];
      if ((!reg.test(value)) || (value === src)) {
        continue;
      }
      allRunes[key] = value;
    }
    return allRunes;
  };
});

LOL.filter('initSkills', function(localService, $routeParams) {
  return function(skills, name) {
    var i, locSkill, numberSkill, _i;

    numberSkill = 0;
    for (i = _i = 0; _i < 18; i = ++_i) {
      locSkill = name + 'Skill' + numberSkill;
      if (localService.get(locSkill) != null) {
        skills[i] = localService.get(locSkill);
      }
      numberSkill++;
    }
    return skills;
  };
});

LOL.filter('initOffensive', function(localService, $timeout) {
  return function(offensive, name) {
    var i, locOff, numberMaster, _i;

    numberMaster = 1;
    for (i = _i = 0; _i < 17; i = ++_i) {
      locOff = name + numberMaster;
      if (localService.get(locOff) != null) {
        offensive[i] = localService.get(locOff);
      }
      numberMaster++;
    }
    return offensive;
  };
});

LOL.filter('initDefensive', function(localService) {
  return function(defensive, name) {
    var i, locOff, numberMaster, _i;

    numberMaster = 18;
    for (i = _i = 0; _i < 16; i = ++_i) {
      locOff = name + numberMaster;
      if (localService.get(locOff) != null) {
        defensive[i] = localService.get(locOff);
      }
      numberMaster++;
    }
    return defensive;
  };
});

LOL.filter('initUtility', function(localService) {
  return function(utility, name) {
    var i, locOff, numberMaster, _i;

    numberMaster = 34;
    for (i = _i = 0; _i < 16; i = ++_i) {
      locOff = name + numberMaster;
      if (localService.get(locOff) != null) {
        utility[i] = localService.get(locOff);
      }
      numberMaster++;
    }
    return utility;
  };
});

LOL.filter('initRunes', function(localService) {
  return function(runes, name) {
    var i, locRune, numberRune, _i;

    numberRune = 0;
    for (i = _i = 0; _i < 4; i = ++_i) {
      locRune = name + 'Rune' + numberRune;
      if (localService.get(locRune) != null) {
        runes[i] = localService.get(locRune);
      }
      numberRune++;
    }
    return runes;
  };
});

LOL.filter('maxTo', function() {
  return function(input, max) {
    if (input >= max) {
      return max;
    } else {
      return input;
    }
  };
});
;// Generated by CoffeeScript 1.6.2
LOL.directive('stats', function() {
  var stats;

  return stats = {
    template: "<ul><li ng-repeat='(key, val) in stats'>{{ key }} <span>{{ val }}</span></li></ul>",
    restrict: 'E',
    scope: '='
  };
});

LOL.directive('items', function($timeout, localService) {
  var items;

  return items = {
    template: "<img  />",
    restrict: "E",
    replace: true,
    link: function(scope, element, attrs) {
      return element.bind('click', function() {
        scope.$parent.selectedItem = element;
        scope.$parent.visibleInnerItems = !scope.$parent.visibleInnerItems;
        return scope.$parent.$apply();
      });
    }
  };
});

LOL.directive('innerItems', function($timeout, localService) {
  var innerItems;

  return innerItems = {
    template: "<img  />",
    restrict: "E",
    replace: true,
    link: function(scope, element, attrs) {
      return element.bind('click', function() {
        var error, item;

        $('.inner-items > img').css('opacity', '1');
        $(element).css('opacity', '0.3');
        $(scope.$parent.selectedItem).attr('src', item);
        item = scope.$parent.name + 'Item' + $(scope.$parent.selectedItem).index();
        try {
          localService.set(item, $(element).attr('ng-src'));
          scope.$parent.hideItemsBlock();
        } catch (_error) {
          error = _error;
          alert("Сохранить в локальное хранилище не удалось: " + error);
        }
        return $timeout(function() {
          return Tooltips.items();
        });
      });
    }
  };
});

LOL.directive('spells', function() {
  var spells;

  return spells = {
    template: "<img />",
    restrict: "E",
    replace: true,
    link: function(scope, element, attrs) {
      return element.bind('click', function() {
        scope.$parent.selectedSpell = element;
        scope.$parent.visibleInnerSpells = !scope.$parent.visibleInnerSpells;
        return scope.$parent.$apply();
      });
    }
  };
});

LOL.directive('innerSpells', function($timeout, localService) {
  var innerSpells;

  return innerSpells = {
    template: "<img />",
    restrict: "E",
    replace: true,
    link: function(scope, element, attrs) {
      return element.bind('click', function() {
        var error, spell;

        $(scope.$parent.selectedSpell).attr('src', spell);
        spell = scope.$parent.name + 'Spell' + $(scope.$parent.selectedSpell).index();
        try {
          localService.set(spell, $(element).attr('ng-src'));
          scope.$parent.hideSpellsBlock();
        } catch (_error) {
          error = _error;
          alert("Сохранить в локальное хранилище не удалось: " + error);
        }
        return $timeout(function() {
          return Tooltips.spells();
        });
      });
    }
  };
});

LOL.directive('skills', function(localService) {
  var skills;

  return skills = {
    template: "<img />",
    restrict: "E",
    replace: true
  };
});

LOL.directive('runes', function($rootScope) {
  var runes;

  return runes = {
    template: "<div>                       <img class='mark' ng-src='{{ runes[0] }}'/>x9                       <img class='seal' ng-src='{{ runes[1] }}'/>x9                       <img class='glyph' ng-src='{{ runes[2] }}'/>x9                       <img class='quint' ng-src='{{ runes[3] }}' />x3                   </div>",
    restrict: "E",
    replace: true,
    link: function(scope, element, attrs) {
      return element.on('click', 'img', function(e) {
        $rootScope.typeRune = e.target.className;
        $rootScope.selectedRune = e.target;
        $rootScope.visibleInnerRunes = !$rootScope.visibleInnerRunes;
        $rootScope.$apply();
        return Tooltips.runes();
      });
    }
  };
});

LOL.directive('innerRunes', function($timeout, $rootScope, $compile, localService) {
  var innerRunes;

  return innerRunes = {
    template: "<img />",
    restrict: "E",
    replace: true,
    link: function(scope, element, attrs) {
      return element.bind('click', function() {
        var clone, error, rune;

        clone = $($rootScope.selectedRune).clone();
        $(clone).attr('src', scope.rune);
        $(clone).insertAfter($rootScope.selectedRune);
        $($rootScope.selectedRune).remove();
        rune = scope.name + 'Rune' + $(clone).index();
        try {
          localService.set(rune, $(element).attr('src'));
          scope.hideRunesBlock();
        } catch (_error) {
          error = _error;
          alert("Сохранить в локальное хранилище не удалось: " + error);
        }
        return $rootScope.$apply();
      });
    }
  };
});
;// Generated by CoffeeScript 1.6.2
LOL.controller('MainCtrl', function($scope, $rootScope, $window, $timeout, $compile, $routeParams, localService) {
  $scope.visibleInnerItems = false;
  $scope.visibleInnerSpells = false;
  $scope.visibleInnerRunes = false;
  $scope.isCanSave = false;
  $scope.Characters = Characters;
  $scope.Masteries = Masteries;
  $scope.AllItems = Items;
  $scope.AllSpells = Spells;
  $scope.AllRunes = Runes;
  $scope.name = $routeParams.name || 'Ahri';
  $scope.stats = Characters[$scope.name].stats;
  $scope.items = Characters[$scope.name].items;
  $scope.spells = Characters[$scope.name].spells;
  $scope.skills = Characters[$scope.name].skills;
  $scope.offensive = Characters[$scope.name].offensive;
  $scope.defensive = Characters[$scope.name].defensive;
  $scope.utility = Characters[$scope.name].utility;
  $scope.runes = Characters[$scope.name].runes;
  $scope.$on('$routeChangeStart', function() {
    return $rootScope.offsetScroll = $(window).scrollTop();
  });
  $scope.$on('$routeChangeSuccess', function(scope, next, current) {
    $('#block').hide().fadeIn(1000);
    $('.inner-items, .inner-spells, .inner-runes').draggable();
    $('.skills-inner').sortable({
      placeholder: 'placehold',
      revert: 'true',
      items: 'img',
      tolerance: 'pointer',
      deactivate: function(event, ui) {
        var saves;

        saves = $(ui.item).siblings().andSelf();
        localService = angular.element('html').injector().get('localService');
        return $(saves).each(function() {
          var error, item;

          item = $scope.name + 'Skill' + $(this).index();
          try {
            return localService.set(item, $(this).attr('src'));
          } catch (_error) {
            error = _error;
            return alert("Сохранить в локальное хранилище не удалось: " + error);
          }
        });
      }
    }).disableSelection();
    $window.scrollTo(0, $rootScope.offsetScroll);
    return $timeout(function() {
      Tooltips.items();
      Tooltips.spells();
      Tooltips[$scope.name]();
      Tooltips.masteries();
      return Tooltips.runes();
    });
  });
  $scope.markActiveClass = function(key) {
    if ($routeParams.name === key) {
      return 'ui-tabs-active ui-state-active';
    }
  };
  $scope.resetBuilds = function() {
    return localService.reset();
  };
  $scope.hideItemsBlock = function() {
    $scope.visibleInnerItems = false;
    $timeout(function() {
      return Tooltips.items();
    });
    return null;
  };
  $scope.hideSpellsBlock = function() {
    $scope.visibleInnerSpells = false;
    $timeout(function() {
      return Tooltips.spells();
    });
    return null;
  };
  $scope.hideRunesBlock = function() {
    $rootScope.visibleInnerRunes = false;
    $timeout(function() {
      return Tooltips.runes();
    });
    return null;
  };
  $scope.offensiveCount = function(offensive) {
    return _.reduce(offensive, function(i, k) {
      return (+i) + (+k);
    });
  };
  $scope.defensiveCount = function(defensive) {
    return _.reduce(defensive, function(i, k) {
      return (+i) + (+k);
    });
  };
  $scope.utilityCount = function(utility) {
    return _.reduce(utility, function(i, k) {
      return (+i) + (+k);
    });
  };
  $scope.doMasteriesCount = function() {
    $scope.masteriesCount = $scope.offensiveCount($scope.offensive) + $scope.defensiveCount($scope.defensive) + $scope.utilityCount($scope.utility);
    return $scope.masteriesCount;
  };
  $scope.saveMasteries = function() {
    var masteries;

    masteries = ($scope.offensive.concat($scope.defensive)).concat($scope.utility);
    _.each(masteries, function(element, index) {
      var error, item;

      item = $scope.name + (index + 1);
      try {
        localService.set(item, element);
      } catch (_error) {
        error = _error;
        alert("Сохранить в локальное хранилище не удалось: " + error);
      }
      $scope.isCanSave = false;
      return null;
    });
    return null;
  };
  $scope.resetMasteries = function() {
    $scope.offensive = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    $scope.defensive = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    $scope.utility = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    $scope.doMasteriesCount();
    $scope.isCanSave = true;
    return null;
  };
  $scope.offensiveUp = function($event, i, max) {
    $scope.doMasteriesCount();
    if ($scope.offensive[i] < max && $scope.masteriesCount <= 29 && $scope.isCanSave) {
      $scope.offensive[i] += 1;
    }
    return null;
  };
  $scope.defensiveUp = function($event, i, max) {
    $scope.doMasteriesCount();
    if ($scope.defensive[i] < max && $scope.masteriesCount <= 29 && $scope.isCanSave) {
      $scope.defensive[i] += 1;
    }
    return null;
  };
  $scope.utilityUp = function($event, i, max) {
    $scope.doMasteriesCount();
    if ($scope.utility[i] < max && $scope.masteriesCount <= 29 && $scope.isCanSave) {
      $scope.utility[i] += 1;
    }
    return null;
  };
  return null;
});
