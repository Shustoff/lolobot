// Generated by CoffeeScript 1.6.2
describe('LOL testing directives', function() {
  var el, prevEl, scope, _ref;

  _ref = [null, null, []], scope = _ref[0], el = _ref[1], prevEl = _ref[2];
  beforeEach(module('lol'));
  beforeEach(inject(function($rootScope, $compile, $controller) {
    var ctrl;

    scope = $rootScope;
    return ctrl = $controller('MainCtrl', {
      $scope: scope
    });
  }));
  describe('Stats testing', function() {
    beforeEach(inject(function($rootScope, $compile, $controller) {
      el = angular.element("<stats></stats>");
      $compile(el)(scope);
      return scope.$digest();
    }));
    it('should be 10 stats for character', function() {
      var lists;

      lists = el.find('li');
      return expect(lists.length).toBe(10);
    });
    return it('stats should be an Object with params', function() {
      return expect(scope.stats).toEqual(jasmine.any(Object));
    });
  });
  describe('Items testing', function() {
    beforeEach(inject(function($compile) {
      el = angular.element("<div><items ng-repeat='item in items | initItems:name' ng-src='{{ item }}'></items></div>");
      $compile(el)(scope);
      return scope.$digest();
    }));
    it('should be 6 items for character', function() {
      var items;

      items = el.find('img');
      return expect(items.length).toBe(6);
    });
    it('items should be an Object with params', function() {
      return expect(scope.items).toEqual(jasmine.any(Object));
    });
    return it('onclick should be show inner-items block', function() {
      var item;

      item = el.find('img:first');
      item.click();
      return expect(scope.visibleInnerItems).toBeTruthy();
    });
  });
  describe('Inner Items testing', function() {
    beforeEach(inject(function($compile) {
      prevEl[0] = angular.element("<div><items ng-repeat='item in items | initItems:name' ng-src='{{ item }}'></items></div>");
      el = angular.element("<div><inner-items ng-repeat='item in AllItems' ng-src='{{ item }}'></inner-items><div>");
      $compile(prevEl[0])(scope);
      $compile(el)(scope);
      return scope.$digest();
    }));
    it('should be available all 130 items for character', function() {
      var innerItems;

      innerItems = el.find('img');
      return expect(innerItems.length).toBe(130);
    });
    it('All items should be an Object with params', function() {
      return expect(scope.AllItems).toEqual(jasmine.any(Object));
    });
    return it('onclick should be add item in build and hide block', function() {
      var flag, item;

      flag = null;
      spyOn(scope, 'hideItemsBlock');
      item = el.find('img:first');
      item.click();
      setTimeout(function() {
        return expect(angular.element(prevEl[0].find('img:first')).attr('src')).toBe(angular.element(item).attr('src'));
      }, 500);
      return expect(scope.hideItemsBlock).toHaveBeenCalled();
    });
  });
  describe('Spells testing', function() {
    beforeEach(inject(function($compile) {
      el = angular.element("<div><spells ng-repeat='spell in spells | initSpells:name' ng-src='{{ spell }}'></spells></div>");
      $compile(el)(scope);
      return scope.$digest();
    }));
    it('should be 2 spells for character', function() {
      var spells;

      spells = el.find('img');
      return expect(spells.length).toBe(2);
    });
    it('spells should be an Object with params', function() {
      return expect(scope.spells).toEqual(jasmine.any(Object));
    });
    return it('onclick should be show inner-spells block', function() {
      var spell;

      spell = el.find('img:first');
      spell.click();
      return expect(scope.visibleInnerSpells).toBeTruthy();
    });
  });
  describe('Inner Spells testing', function() {
    beforeEach(inject(function($compile) {
      prevEl[1] = angular.element("<div><spells ng-repeat='spell in spells | initSpells:name' ng-src='{{ spell }}'></spells></div>");
      el = angular.element("<div><inner-spells ng-repeat='spell in AllSpells | existsSpells' ng-src='{{ spell }}'></inner-spells><div>");
      $compile(prevEl[1])(scope);
      $compile(el)(scope);
      return scope.$digest();
    }));
    it('should be available all 14 spells for character', function() {
      var innerSpells;

      innerSpells = el.find('img');
      return expect(innerSpells.length - 2).toBe(14);
    });
    it('All spells should be an Object with params', function() {
      return expect(scope.AllSpells).toEqual(jasmine.any(Object));
    });
    return it('onclick should be add spell in build and hide block', function() {
      var spell;

      spyOn(scope, 'hideSpellsBlock');
      spell = el.find('img:first');
      spell.click();
      setTimeout(function() {
        return expect(angular.element(prevEl[1].find('img:first')).attr('src')).toBe(angular.element(spell).attr('src'));
      }, 500);
      return expect(scope.hideSpellsBlock).toHaveBeenCalled();
    });
  });
  describe('Skills testing', function() {
    beforeEach(inject(function($rootScope, $compile, $controller) {
      el = angular.element("<div><skills ng-repeat='skill in skills | initSkills:name' ng-src='{{ skill }}'></skills></div>");
      $compile(el)(scope);
      return scope.$digest();
    }));
    it('should be 18 skills for character', function() {
      var skills;

      skills = el.find('img');
      return expect(skills.length).toBe(18);
    });
    return it('skills should be an Object with params', function() {
      return expect(scope.skills).toEqual(jasmine.any(Object));
    });
  });
  describe('Runes testing', function() {
    beforeEach(inject(function($compile) {
      el = angular.element("<runes></runes>");
      $compile(el)(scope);
      return scope.$digest();
    }));
    it('should be 4 runes for character', function() {
      var runes;

      runes = el.find('img');
      return expect(runes.length).toBe(4);
    });
    it('runes should be an Object with params', function() {
      return expect(scope.runes).toEqual(jasmine.any(Object));
    });
    return it('onclick should be show inner-runes block', function() {
      var rune;

      rune = el.find('img:first');
      rune.click();
      return expect(scope.visibleInnerRunes).toBeTruthy();
    });
  });
  return describe('Inner Runes testing', function() {
    beforeEach(inject(function($compile) {
      prevEl[2] = angular.element("<runes></runes>");
      el = angular.element("<div><inner-runes ng-repeat='rune in AllRunes' ng-src='{{ rune }}'></inner-runes></div>");
      $compile(prevEl[2])(scope);
      $compile(el)(scope);
      return scope.$digest();
    }));
    it('should be available all 38 runes for character', function() {
      var innerRunes;

      innerRunes = el.find('img');
      return expect(innerRunes.length).toBe(38);
    });
    it('All runes should be an Object with params', function() {
      return expect(scope.AllRunes).toEqual(jasmine.any(Object));
    });
    return it('onclick should be add rune in build and hide block', function() {
      var rune;

      spyOn(scope, 'hideRunesBlock');
      rune = el.find('img:first');
      rune.click();
      setTimeout(function() {
        return expect(angular.element(prevEl[2].find('img:first')).attr('src')).toBe(angular.element(rune).attr('src'));
      }, 500);
      return expect(scope.hideRunesBlock).toHaveBeenCalled();
    });
  });
});
