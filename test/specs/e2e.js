// Generated by CoffeeScript 1.3.3

describe('LOL End-to-End tests', function() {
  beforeEach(function() {
    return browser().navigateTo('../index.html');
  });
  describe('Default route redirect', function() {
    return it('should automatically redirect to /Ahri when location hash/fragment is empty', function() {
      return expect(browser().location().url()).toBe("/Ahri");
    });
  });
  describe('Route view render', function() {
    beforeEach(function() {
      return browser().navigateTo('#/Akali');
    });
    return it('should render Route view-name when user navigates to /view-name', function() {
      return element('.image img').query(function(selectedElements, done) {
        expect(browser().location().url()).toBe('/' + selectedElements.attr('id'));
        return done();
      });
    });
  });
  describe('Character links tests', function() {
    it('should change browser URL and render new character', function() {
      element('li.ui-state-default:nth-child(2) a').click();
      expect(browser().location().url()).toBe('/Akali');
      return expect(element('.image img').attr('id')).toBe('Akali');
    });
    return it('should be render 99 character links', function() {
      return expect(repeater('.ui-tabs-nav li').count()).toEqual(99);
    });
  });
  describe('Show and hide modal reset dialog', function() {
    it('should be show popup with reset suggestion', function() {
      element('.icon-trash').click();
      return expect(element('#myModal').css('display')).toBe('block');
    });
    return it('should be hide popup with reset suggestion', function() {
      element('.btn.cancel').click();
      return expect(element('#myModal').css('display')).toBe('none');
    });
  });
  describe('Items tests', function() {
    it('should be show items container on click item and close container on click close', function() {
      element('.items img:nth-child(1)').click();
      expect(element('.inner-items').css('display')).toBe('block');
      element('.inner-items span').click();
      return expect(element('.inner-items').css('display')).toBe('none');
    });
    it('should be render 130 items in items container block', function() {
      return expect(repeater('.inner-items img').count()).toEqual(130);
    });
    return it('should be add item in item-build', function() {
      element('.items img:nth-child(1)').click();
      element('.inner-items img:nth-child(3)').click();
      return expect(element('.items img:nth-child(1)').attr('src')).toEqual('img/items/abyssal-scepter.gif');
    });
  });
  describe('Spells tests', function() {
    it('should be show spells container on click spell and close container on click close', function() {
      element('.spells img:nth-child(1)').click();
      expect(element('.inner-spells').css('display')).toBe('block');
      element('.inner-spells span').click();
      return expect(element('.inner-spells').css('display')).toBe('none');
    });
    it('should be render 14 spells in spells container block', function() {
      return expect(repeater('.inner-spells img').count()).toEqual(14);
    });
    it('should be add spell in spell-build', function() {
      element('.spells img:nth-child(1)').click();
      return element('.inner-spells img:nth-child(3)').query(function(selectedElements, done) {
        selectedElements.click();
        expect(element('.spells img:nth-child(1)').attr('src')).toEqual(selectedElements.attr('src'));
        return done();
      });
    });
    return it('dont show render exist spell in spell container', function() {
      element('.spells img:nth-child(1)').click();
      return element('.inner-spells img').query(function(selectedElements, done) {
        expect(element('.spells img:nth-child(1)').attr('src')).not().toEqual(selectedElements.attr('src'));
        return done();
      });
    });
  });
  describe('Skills test', function() {
    return it('should render 18 skills in build', function() {
      return expect(repeater('.skills-inner img').count(18)).toBeTruthy();
    });
  });
  describe('Masteries test', function() {
    it('should be 30 masteries by default', function() {
      return expect(binding('doMasteriesCount()')).toEqual('30');
    });
    it('button save masteries should be disabled by default', function() {
      return expect(element('.btn-success').attr('disabled')).toBe('disabled');
    });
    it('should be 0 masteries after reset', function() {
      element('.reset-button').click();
      return expect(binding('doMasteriesCount()')).toEqual('0');
    });
    it('should be +1 masteries after reset masteries', function() {
      element('.reset-button').click();
      element('.offensive .first-off img:first').click();
      return expect(binding('doMasteriesCount()')).toEqual('1');
    });
    it('dont should be +1 masteries if masteries count = 30', function() {
      element('.offensive .first-off img:first').click();
      return expect(binding('doMasteriesCount()')).toEqual('30');
    });
    return it('button save masteries should be enabled if up masteries = 30', function() {
      element('.reset-button').click();
      element('.masteries .first-off img').click();
      element('.masteries .first-off img').click();
      element('.masteries .second-off img').click();
      element('.masteries .second-off img').click();
      return expect(element('.btn-success').attr('disabled')).not().toBeDefined();
    });
  });
  return describe('Runes test', function() {
    it('should be show runes container on click rune and close container on click close', function() {
      element('.runes img:nth-child(1)').click();
      expect(element('.inner-runes').css('display')).toBe('block');
      element('.inner-runes span').click();
      return expect(element('.inner-runes').css('display')).toBe('none');
    });
    it('should be render 8 mark runes in inner runes block', function() {
      element('.runes img.mark').click();
      return expect(repeater('.inner-runes img').count()).toEqual(8);
    });
    it('should be render 7 seal runes in inner runes block', function() {
      element('.runes img.seal').click();
      return expect(repeater('.inner-runes img').count()).toEqual(7);
    });
    it('should be render 6 glyph runes in inner runes block', function() {
      element('.runes img.glyph').click();
      return expect(repeater('.inner-runes img').count()).toEqual(6);
    });
    it('should be render 10 quint runes in inner runes block', function() {
      element('.runes img.quint').click();
      return expect(repeater('.inner-runes img').count()).toEqual(10);
    });
    it('should be add rune in rune-build', function() {
      element('.runes img:nth-child(1)').click();
      return element('.inner-runes img:nth-child(3)').query(function(selectedElements, done) {
        selectedElements.click();
        expect(element('.runes img:nth-child(1)').attr('src')).toEqual(selectedElements.attr('src'));
        return done();
      });
    });
    return it('dont show render exist rune in rune container', function() {
      element('.runes img:nth-child(1)').click();
      return element('.inner-runes img').query(function(selectedElements, done) {
        expect(element('.runes img:nth-child(1)').attr('src')).not().toEqual(selectedElements.attr('src'));
        return done();
      });
    });
  });
});
