// Generated by CoffeeScript 1.6.2
describe('LOL testing filters', function() {
  var filter, localService, scope;

  scope = null;
  localService = null;
  filter = null;
  beforeEach(module('lol'));
  beforeEach(inject(function($rootScope, $controller, $injector, $filter) {
    var ctrl;

    scope = $rootScope;
    ctrl = $controller('MainCtrl', {
      $scope: scope
    });
    filter = $filter;
    return localService = $injector.get('localService');
  }));
  describe('Test Init Filter', function() {
    it('should be exist', function() {
      return expect(filter('initItems')).not.toEqual(null);
    });
    it('should return 6 filtered items', function() {
      var items;

      items = filter('initItems')(scope.items, 'Ahri');
      return expect(items.length).toBe(6);
    });
    return it('should be request to localService get items', function() {
      spyOn(localService, 'get');
      filter('initItems')(scope.items, 'Ahri');
      return expect(localService.get).toHaveBeenCalled();
    });
  });
  describe('Test Init spells', function() {
    it('should be exist', function() {
      return expect(filter('initSpells')).not.toEqual(null);
    });
    it('should return 2 filtered spells', function() {
      var spells;

      spells = filter('initSpells')(scope.spells, 'Ahri');
      return expect(spells.length).toBe(2);
    });
    return it('should be request to localService get spells', function() {
      spyOn(localService, 'get');
      filter('initSpells')(scope.spells, 'Ahri');
      return expect(localService.get).toHaveBeenCalled();
    });
  });
  describe('Test exists Spells', function() {
    it('should be exist', function() {
      return expect(filter('existsSpells')).not.toEqual(null);
    });
    return it('should return 14 filtered spells without exists spells', function() {
      var eSpells;

      eSpells = filter('existsSpells')(scope.AllSpells);
      return expect(_.values(eSpells).length - 2).toBe(14);
    });
  });
  describe('Test Init Skills', function() {
    it('should be exist', function() {
      return expect(filter('initSkills')).not.toEqual(null);
    });
    it('should return 18 filtered skills', function() {
      var skills;

      skills = filter('initSkills')(scope.skills, 'Ahri');
      return expect(skills.length).toBe(18);
    });
    return it('should be request to localService get skills', function() {
      spyOn(localService, 'get');
      filter('initSkills')(scope.items, 'Ahri');
      return expect(localService.get).toHaveBeenCalled();
    });
  });
  describe('Test Init Offensive', function() {
    it('should be exist', function() {
      return expect(filter('initOffensive')).not.toEqual(null);
    });
    it('should return 17 filtered offensive masteries', function() {
      var offensive;

      offensive = filter('initOffensive')(scope.offensive, 'Ahri');
      return expect(offensive.length).toBe(17);
    });
    return it('should be request to localService get offensive', function() {
      spyOn(localService, 'get');
      filter('initOffensive')(scope.offensive, 'Ahri');
      return expect(localService.get).toHaveBeenCalled();
    });
  });
  describe('Test Init Defensive', function() {
    it('should be exist', function() {
      return expect(filter('initDefensive')).not.toEqual(null);
    });
    it('should return 16 filtered defensive masteries', function() {
      var defensive;

      defensive = filter('initDefensive')(scope.defensive, 'Ahri');
      return expect(defensive.length).toBe(16);
    });
    return it('should be request to localService get defensive', function() {
      spyOn(localService, 'get');
      filter('initDefensive')(scope.defensive, 'Ahri');
      return expect(localService.get).toHaveBeenCalled();
    });
  });
  describe('Test Init Utility', function() {
    it('should be exist', function() {
      return expect(filter('initUtility')).not.toEqual(null);
    });
    it('should return 16 filtered utility masteries', function() {
      var utility;

      utility = filter('initUtility')(scope.utility, 'Ahri');
      return expect(utility.length).toBe(16);
    });
    return it('should be request to localService get utility', function() {
      spyOn(localService, 'get');
      filter('initUtility')(scope.utility, 'Ahri');
      return expect(localService.get).toHaveBeenCalled();
    });
  });
  describe('Test Runes', function() {
    it('should be exist', function() {
      return expect(filter('initRunes')).not.toEqual(null);
    });
    it('should return 4 filtered runes', function() {
      var runes;

      runes = filter('initRunes')(scope.runes, 'Ahri');
      return expect(runes.length).toBe(4);
    });
    return it('should be request to localService get runes', function() {
      spyOn(localService, 'get');
      filter('initRunes')(scope.runes, 'Ahri');
      return expect(localService.get).toHaveBeenCalled();
    });
  });
  describe('Test Exists Runes', function() {
    it('should be exist', function() {
      return expect(filter('existsRunes')).not.toEqual(null);
    });
    it('should return 8 filtered runes mark type without exist', function() {
      var eRunes;

      eRunes = filter('existsRunes')(scope.AllRunes, 'mark');
      return expect(_.values(eRunes).length - 1).toBe(8);
    });
    it('should return 7 filtered runes seal type without exist', function() {
      var eRunes;

      eRunes = filter('existsRunes')(scope.AllRunes, 'seal');
      return expect(_.values(eRunes).length - 1).toBe(7);
    });
    it('should return 6 filtered runes glyph type without exist', function() {
      var eRunes;

      eRunes = filter('existsRunes')(scope.AllRunes, 'glyph');
      return expect(_.values(eRunes).length - 1).toBe(6);
    });
    return it('should return 10 filtered runes quint type without exist', function() {
      var eRunes;

      eRunes = filter('existsRunes')(scope.AllRunes, 'quint');
      return expect(_.values(eRunes).length - 1).toBe(10);
    });
  });
  return describe('Test Max To', function() {
    return it('should be exist and return max value', function() {
      var maxValue1, maxValue2;

      maxValue1 = filter('maxTo')(3, 4);
      maxValue2 = filter('maxTo')(6, 4);
      expect(maxValue1).toBe(3);
      return expect(maxValue2).toBe(4);
    });
  });
});
